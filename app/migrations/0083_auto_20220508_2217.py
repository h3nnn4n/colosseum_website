# Generated by Django 3.2.13 on 2022-05-08 22:17
from collections import defaultdict

from django.db import migrations
from django.db.models import Count


PLACE_TO_TROPHY_TYPE = {
    1: "FIRST",
    2: "SECOND",
    3: "THIRD",
}


def backfill_trophies(apps, schema_editor):
    Tournament = apps.get_model("app", "Tournament")
    Trophy = apps.get_model("app", "Trophy")

    tournaments = (
        Tournament.objects.filter(done=True)
        .annotate(stuff=Count("trophies__id"))
        .only("id")
        .filter(stuff=0)
    )

    print(f"backfilling {tournaments.count()} tournaments with trophies")

    for tournament in tournaments:
        try:
            if not tournament.done:
                raise ValueError(
                    f"Tournament {tournament.id} is not done. "
                    "Can only create trophies for tournaments that are complete"
                )

            if tournament.pending_matches_count > 0:
                raise ValueError(
                    f"Complete tournament {tournament.id} has pending matches"
                )

            if tournament.trophies.count() > 0:
                print(
                    f"Tournament {tournament.id} had {tournament.trophies.count()} trophies. Recreating them"
                )
                tournament.trophies.delete()

            results = tournament.ratings
            top_3_scores = sorted([result.score for result in results], reverse=True)[
                :3
            ]
            rankings = defaultdict(list)

            for result in results:
                rankings[result.score].append(result.agent)

            for place, score in enumerate(top_3_scores):
                trophy_type = PLACE_TO_TROPHY_TYPE[place + 1]

                for agent in rankings[score]:
                    Trophy.objects.create(
                        agent=agent,
                        game=tournament.game,
                        season=tournament.season,
                        tournament=tournament,
                        type=trophy_type,
                    )
        except ValueError as e:
            print(
                f"failed to create trophies for tournament {tournament} with error: {e}"
            )


class Migration(migrations.Migration):
    dependencies = [("app", "0082_auto_20220508_1558")]

    operations = [migrations.RunPython(backfill_trophies)]
